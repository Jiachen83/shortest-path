#include <iostream> 
#include <algorithm> 
#include <string> 
using namespace std; 

const int r = 5, c = 6; 
string path[r][c]; 

int calcuCost(int i, int j) { 
   static int weight[r][c] = {{3,4,1,2,8,6},
                              {6,1,8,2,7,4}, 
			      {5,9,3,9,9,5}, 
			      {8,4,1,3,2,6}, 
                              {3,7,2,8,6,4}};
   static int cost[r][c] = {};
 if (cost[i][j] != 0) return cost[i][j];
 if (j == 0) { 
	path[i][j] = to_string(i); 
	return weight[i][j];
   }

   int up = calcuCost((i+r-1)%r, j-1);  
   int left = calcuCost(i, j-1); 
   int down = calcuCost((i+1)%r, j-1); 
   int minCost = min(min(up, left), down);

   if (minCost == up) 
      path[i][j] = path[(i+r-1)%r][j-1] + to_string(i); 
	else if (minCost == left)
      path[i][j] = path[i][j-1] + to_string(i); 
	else path[i][j] = path[(i+1)%r][j-1] + to_string(i);
   cost[i][j] = minCost + weight[i][j];  
   return cost[i][j];   
} 

int main() { 
	int minRow = 0; 
	for (int i = 1; i < r; ++i)
      	if (calcuCost(i, c-1) < calcuCost(minRow, c-1))
         minRow = i; 
	cout << "The length of the shortest path is " << calcuCost(minRow, c-1);
	cout << ".\nThe rows of the path from left to right are " << path[minRow][c-1] << ".";
   return 0;
}
